import "./BookingStatus.tsp";
import "./BookingCancellation.tsp";
import "./Contact.tsp";
import "./Ticket.tsp";
import "./UnitItem.tsp";
import "./Availability.tsp";
// import "./BookingAvailability.tsp";
import "./DeliveryMethod.tsp";
import "./capabilities/pricing/BookingPricing.tsp";

namespace Octo;

const BOOKING_ID_DOC = "A unique identifier generated by the supplier system for the booking. This ID ensures traceability and must be unique within the system.";
const BOOKING_UUID_DOC = "An optional idempotency key set when creating a booking to prevent duplicate bookings in case of retries. Used for API calls.";
const BOOKING_TEST_MODE_DOC = "Indicates whether the booking was created in test mode. If true, it is a test booking.";
const BOOKING_RESELLER_REFERENCE_DOC = "A reference provided by the reseller to identify the booking.";
const BOOKING_SUPPLIER_REFERENCE_DOC = "A unique reference assigned by the supplier to identify the booking within their system.";
const BOOKING_STATUS_DOC = """
  Represents the current state of the booking:
  ON_HOLD: Awaiting confirmation.
  EXPIRED: Not confirmed within the hold expiration time.
  CONFIRMED: Successfully confirmed.
  CANCELLED: The booking was canceled.
  PENDING: Awaiting external confirmation.
  REDEEMED: The booking has been used.
  UPGRADED: Upgraded to another tier or package.
  """;
const BOOKING_UTC_CREATED_AT_DOC = "An ISO8601 date time in UTC when the booking was created.";
const BOOKING_UTC_UPDATED_AT_DOC = "An ISO8601 date time in UTC when the booking was last updated, if applicable.";
const BOOKING_UTC_EXPIRES_AT_DOC = "An ISO8601 date times in UTC for when this booking is due to expire if the status is ON_HOLD.";
const BOOKING_UTC_REDEEMED_AT_DOC = "An ISO8601 date time in UTC at when the booking was redeemed, if applicable.";
const BOOKING_UTC_CONFIRMED_AT_DOC = "An ISO8601 date time in UTC when the booking was confirmed, if applicable.";
const BOOKING_PRODUCT_ID_DOC = "The ID of product booked.";
const BOOKING_PRODUCT_DOC = "The object of booked product. ";
const BOOKING_OPTION_ID_DOC = "The ID of option booked.";
const BOOKING_OPTION_DOC = "The object of booked option.";
const BOOKING_CANCELLABLE_DOC = "A boolean field indicating whether this booking can be cancelled.";
const BOOKING_CANCELLATION_DOC = "Cancellation object with details abour cancellation if booking is cancelled";
const BOOKING_FREESALE_DOC = "Indicates if the booking was made without checking availability.";
const BOOKING_AVAILABILITY_ID_DOC = "The ID of availability booked.";
const BOOKING_AVAILABILITY_DOC = "The availability object that was booked.";
const BOOKING_CONTACT_DOC = "Customer contact details for the booking (see unit object for per ticket / unit details).";
const BOOKING_NOTES_DOC = "Customer-facing public notes for the booking.";
const BOOKING_DELIVERY_METHODS_DOC = """
  Specifies all supported methods of how tickets or vouchers for this booking are delivered.
  TICKET: Delivered individually per unit in the booking, where each person or unit receives a separate ticket. These will be provided in the ticket object.
  VOUCHER: Delivered as a single voucher for the entire booking, consolidating all units under one document. These will be provided in the voucher object.
  This field ensures clarity on the format of ticket or voucher delivery to resellers and customers.
  """;
const BOOKING_VOUCHER_DOC = "Details for voucher-based delivery, provided when VOUCHER is one of deliveryMethods.";
const BOOKING_UNIT_ITEMS_DOC = "An array of unit items included in the booking.";

const BOOKING_ID_EXAMPLE = "bbbb6227-54fc-4c32-9ed7-dc3eb99966ea";
const BOOKING_UUID_EXAMPLE = "559aed3d-6d5b-4fe0-bfca-99f5e7218a56";
const BOOKING_TEST_MODE_EXAMPLE = false;
const BOOKING_RESELLER_REFERENCE_EXAMPLE = null;
const BOOKING_SUPPLIER_REFERENCE_EXAMPLE = "XOPSUT";
const BOOKING_STATUS_EXAMPLE = BookingStatus.CONFIRMED;
const BOOKING_UTC_CREATED_AT_EXAMPLE = utcDateTime.fromISO("2022-05-25T10:34:22Z");
const BOOKING_UTC_UPDATED_AT_EXAMPLE = utcDateTime.fromISO("2022-05-25T10:34:22Z");
const BOOKING_UTC_EXPIRES_AT_EXAMPLE = utcDateTime.fromISO("2022-05-25T11:04:22Z");
const BOOKING_UTC_REDEEMED_AT_EXAMPLE = utcDateTime.fromISO("2022-06-25T10:34:22Z");
const BOOKING_UTC_CONFIRMED_AT_EXAMPLE = utcDateTime.fromISO("2022-05-25T11:00:22Z");
const BOOKING_PRODUCT_ID_EXAMPLE = PRODUCT_ID_EXAMPLE;

const BOOKING_PRODUCT_EXAMPLE = PRODUCT_EXAMPLE;
const BOOKING_OPTION_ID_EXAMPLE = OPTION_ID_EXAMPLE;
const BOOKING_OPTION_EXAMPLE = OPTION_EXAMPLE;
const BOOKING_CANCELLABLE_EXAMPLE = true;
const BOOKING_FREESALE_EXAMPLE = false;
const BOOKING_AVAILABILITY_ID_EXAMPLE = "";
const BOOKING_CONTACT_EXAMPLE = CONTACT_EXAMPLE;
const BOOKING_NOTES_EXAMPLE = "Optional notes for the booking";
const BOOKING_DELIVERY_METHODS_EXAMPLE = #[
  DeliveryMethod.TICKET,
  DeliveryMethod.VOUCHER
];
const BOOKING_VOUCHER_EXAMPLE = TICKET_EXAMPLE;
const BOOKING_UNIT_ITEMS_EXAMPLE = #[UNIT_ITEM_ADULT_ON_HOLD];

@example(BOOKING_ON_HOLD_EXAMPLE)
model Booking {
  @doc(BOOKING_ID_DOC)
  @example(BOOKING_ID_EXAMPLE)
  id: string;

  @doc(BOOKING_UUID_DOC)
  @example(BOOKING_UUID_EXAMPLE)
  @format("uuid")
  uuid: string;

  @doc(BOOKING_TEST_MODE_DOC)
  @example(BOOKING_TEST_MODE_EXAMPLE)
  testMode: boolean;

  @doc(BOOKING_RESELLER_REFERENCE_DOC)
  @example(BOOKING_RESELLER_REFERENCE_EXAMPLE)
  resellerReference: string | null;

  @doc(BOOKING_RESELLER_REFERENCE_DOC)
  @example(BOOKING_SUPPLIER_REFERENCE_EXAMPLE)
  supplierReference: string | null;

  @doc(BOOKING_STATUS_DOC)
  @example(BOOKING_STATUS_EXAMPLE)
  status: BookingStatus;

  @doc(BOOKING_UTC_CREATED_AT_DOC)
  @example(BOOKING_UTC_CREATED_AT_EXAMPLE)
  utcCreatedAt: utcDateTime;

  @doc(BOOKING_UTC_UPDATED_AT_DOC)
  @example(BOOKING_UTC_UPDATED_AT_EXAMPLE)
  utcUpdatedAt: utcDateTime | null;

  @doc(BOOKING_UTC_EXPIRES_AT_DOC)
  @example(BOOKING_UTC_EXPIRES_AT_EXAMPLE)
  utcExpiresAt: utcDateTime | null;

  @doc(BOOKING_UTC_REDEEMED_AT_DOC)
  @example(BOOKING_UTC_REDEEMED_AT_EXAMPLE)
  utcRedeemedAt: utcDateTime | null;

  @doc(BOOKING_UTC_CONFIRMED_AT_DOC)
  @example(BOOKING_UTC_CONFIRMED_AT_EXAMPLE)
  utcConfirmedAt: utcDateTime | null;

  @doc(BOOKING_PRODUCT_ID_DOC)
  @example(BOOKING_PRODUCT_ID_EXAMPLE)
  productId: string;

  @doc(BOOKING_PRODUCT_DOC)
  @example(BOOKING_PRODUCT_EXAMPLE)
  product?: Product;

  @doc(BOOKING_OPTION_ID_DOC)
  @example(BOOKING_OPTION_ID_EXAMPLE)
  optionId: string;

  @doc(BOOKING_OPTION_ID_DOC)
  @example(BOOKING_OPTION_EXAMPLE)
  option?: Option;

  @doc(BOOKING_OPTION_DOC)
  @example(BOOKING_CANCELLABLE_EXAMPLE)
  cancellable: boolean;

  @doc(BOOKING_CANCELLABLE_DOC)
  @example(BOOKING_CANCELLATION_EXAMPLE)
  cancellation: BookingCancellation | null;

  @doc(BOOKING_FREESALE_DOC)
  @example(BOOKING_FREESALE_EXAMPLE)
  freesale: boolean;

  @doc(BOOKING_AVAILABILITY_ID_DOC)
  @example(BOOKING_AVAILABILITY_ID_EXAMPLE)
  availabilityId: string;

  @doc(BOOKING_AVAILABILITY_DOC)
  @example(AVAILABILITY_EXAMPLE)
  availability: Availability;

  @doc(BOOKING_CONTACT_DOC)
  @example(BOOKING_CONTACT_EXAMPLE)
  contact: Contact;

  @doc(BOOKING_NOTES_DOC)
  @example(BOOKING_NOTES_EXAMPLE)
  notes: string | null;

  @doc(BOOKING_DELIVERY_METHODS_DOC)
  @example(BOOKING_DELIVERY_METHODS_EXAMPLE)
  deliveryMethods: DeliveryMethod[];

  @doc(BOOKING_VOUCHER_DOC)
  @example(BOOKING_VOUCHER_EXAMPLE)
  voucher: Ticket | null;

  @doc(BOOKING_UNIT_ITEMS_DOC)
  @example(BOOKING_UNIT_ITEMS_EXAMPLE)
  unitItems: UnitItem[];

  // capabilities
  ...BookingPricing;
}

const BOOKING_ON_HOLD_EXAMPLE = #{
  id: BOOKING_ID_EXAMPLE,
  uuid: BOOKING_UUID_EXAMPLE,
  testMode: BOOKING_TEST_MODE_EXAMPLE,
  resellerReference: BOOKING_RESELLER_REFERENCE_EXAMPLE,
  supplierReference: BOOKING_SUPPLIER_REFERENCE_EXAMPLE,
  status: BookingStatus.ON_HOLD,
  utcCreatedAt: BOOKING_UTC_CREATED_AT_EXAMPLE,
  utcUpdatedAt: BOOKING_UTC_UPDATED_AT_EXAMPLE,
  utcExpiresAt: BOOKING_UTC_EXPIRES_AT_EXAMPLE,
  utcRedeemedAt: null,
  utcConfirmedAt: null,
  productId: BOOKING_PRODUCT_ID_EXAMPLE,
  product: BOOKING_PRODUCT_EXAMPLE,
  optionId: BOOKING_OPTION_ID_EXAMPLE,
  option: BOOKING_OPTION_EXAMPLE,
  cancellable: BOOKING_CANCELLABLE_EXAMPLE,
  cancellation: null,
  freesale: BOOKING_FREESALE_EXAMPLE,
  availabilityId: BOOKING_AVAILABILITY_ID_EXAMPLE,
  availability: AVAILABILITY_EXAMPLE,
  contact: BOOKING_CONTACT_EXAMPLE,
  notes: BOOKING_NOTES_EXAMPLE,
  deliveryMethods: BOOKING_DELIVERY_METHODS_EXAMPLE,
  voucher: null,
  unitItems: #[
    UNIT_ITEM_ADULT_ON_HOLD,
    UNIT_ITEM_CHILD_ON_HOLD,
    UNIT_ITEM_INFANT_ON_HOLD
  ],
};

const BOOKING_ON_HOLD_EXAMPLE_PRICING = #{
  ...BOOKING_ON_HOLD_EXAMPLE,
  product: PRODUCT_PRICING_PER_UNIT,
  option: OPTION_PRICING_PER_UNIT,
  unitItems: #[
    UNIT_ITEM_ADULT_ON_HOLD_PRICING_EUR,
    UNIT_ITEM_CHILD_ON_HOLD_PRICING_EUR,
    UNIT_ITEM_INFANT_ON_HOLD_PRICING_EUR
  ],
};

const BOOKING_CONFIRMED_EXAMPLE = #{
  id: BOOKING_ID_EXAMPLE,
  uuid: BOOKING_UUID_EXAMPLE,
  testMode: BOOKING_TEST_MODE_EXAMPLE,
  resellerReference: BOOKING_RESELLER_REFERENCE_EXAMPLE,
  supplierReference: BOOKING_SUPPLIER_REFERENCE_EXAMPLE,
  status: BookingStatus.CONFIRMED,
  utcCreatedAt: BOOKING_UTC_CREATED_AT_EXAMPLE,
  utcUpdatedAt: BOOKING_UTC_UPDATED_AT_EXAMPLE,
  utcExpiresAt: null,
  utcRedeemedAt: null,
  utcConfirmedAt: BOOKING_UTC_CONFIRMED_AT_EXAMPLE,
  productId: BOOKING_PRODUCT_ID_EXAMPLE,
  product: BOOKING_PRODUCT_EXAMPLE,
  optionId: BOOKING_OPTION_ID_EXAMPLE,
  option: BOOKING_OPTION_EXAMPLE,
  cancellable: BOOKING_CANCELLABLE_EXAMPLE,
  cancellation: null,
  freesale: BOOKING_FREESALE_EXAMPLE,
  availabilityId: BOOKING_AVAILABILITY_ID_EXAMPLE,
  availability: AVAILABILITY_EXAMPLE,
  contact: BOOKING_CONTACT_EXAMPLE,
  notes: BOOKING_NOTES_EXAMPLE,
  deliveryMethods: BOOKING_DELIVERY_METHODS_EXAMPLE,
  voucher: TICKET_EXAMPLE,
  unitItems: #[
    UNIT_ITEM_ADULT_CONFIRMED,
    UNIT_ITEM_CHILD_CONFIRMED,
    UNIT_ITEM_INFANT_CONFIRMED
  ],
};

const BOOKING_CONFIRMED_EXAMPLE_PRICING = #{
  ...BOOKING_CONFIRMED_EXAMPLE,
  product: PRODUCT_PRICING_PER_UNIT,
  option: OPTION_PRICING_PER_UNIT,
  unitItems: #[
    UNIT_ITEM_ADULT_CONFIRMED_PRICING_EUR,
    UNIT_ITEM_CHILD_CONFIRMED_PRICING_EUR,
    UNIT_ITEM_INFANT_CONFIRMED_PRICING_EUR
  ],
};

const BOOKING_CANCELLED_EXAMPLE = #{
  id: BOOKING_ID_EXAMPLE,
  uuid: BOOKING_UUID_EXAMPLE,
  testMode: BOOKING_TEST_MODE_EXAMPLE,
  resellerReference: BOOKING_RESELLER_REFERENCE_EXAMPLE,
  supplierReference: BOOKING_SUPPLIER_REFERENCE_EXAMPLE,
  status: BookingStatus.CANCELLED,
  utcCreatedAt: BOOKING_UTC_CREATED_AT_EXAMPLE,
  utcUpdatedAt: BOOKING_UTC_UPDATED_AT_EXAMPLE,
  utcExpiresAt: null,
  utcRedeemedAt: null,
  utcConfirmedAt: BOOKING_UTC_CONFIRMED_AT_EXAMPLE,
  productId: BOOKING_PRODUCT_ID_EXAMPLE,
  product: BOOKING_PRODUCT_EXAMPLE,
  optionId: BOOKING_OPTION_ID_EXAMPLE,
  option: BOOKING_OPTION_EXAMPLE,
  cancellable: false,
  cancellation: BOOKING_CANCELLATION_EXAMPLE,
  freesale: BOOKING_FREESALE_EXAMPLE,
  availabilityId: BOOKING_AVAILABILITY_ID_EXAMPLE,
  availability: AVAILABILITY_EXAMPLE,
  contact: BOOKING_CONTACT_EXAMPLE,
  notes: BOOKING_NOTES_EXAMPLE,
  deliveryMethods: BOOKING_DELIVERY_METHODS_EXAMPLE,
  voucher: null,
  unitItems: #[],
};

const BOOKING_CANCELLED_EXAMPLE_PRICING = #{
  ...BOOKING_CANCELLED_EXAMPLE,
  product: PRODUCT_PRICING_PER_UNIT,
  option: OPTION_PRICING_PER_UNIT,
  unitItems: #[],
};
