import "./BookingStatus.tsp";
import "./BookingCancellation.tsp";
import "./Contact.tsp";
import "./Ticket.tsp";
import "./UnitItem.tsp";
import "./BookingAvailability.tsp";
import "./DeliveryMethod.tsp";
import "./capabilities/pricing/BookingPricing.tsp";

const BOOKING_ID_DOC = "A unique ID / UUID generated by the supplier system to identify the booking.";
const BOOKING_UUID_DOC = "A UUID you can set when generating the booking to use as an idempotency key.";
const BOOKING_TEST_MODE_DOC = "If `TRUE`, booking was created on test mode";
const BOOKING_RESELLER_REFERENCE_DOC = "The reference set by the Reseller. A mandatory field for resellers to be set in the booking confirmation request.";
const BOOKING_SUPPLIER_REFERENCE_DOC = "The Supplier's / booking platform reference.";
const BOOKING_STATUS_DOC = "The status of the booking, possible values are:\n`ON_HOLD` The booking is pending confirmation, this is the default value when you first create the booking.\n`EXPIRED` If the booking is not confirmed before the expiration hold expires, it goes into an expired state.\n`CONFIRMED` Once the confirmation call is made the booking is ready to be used.\n`CANCELLED` If the booking is cancelled.\n`PENDING` If the booking is pending outside availability confirmation.\n`REDEEMED` If the booking is already redeemed.";
const BOOKING_UTC_CREATED_AT_DOC = "An ISO8601 date time in UTC when the booking was created.";
const BOOKING_UTC_UPDATED_AT_DOC = "An ISO8601 date time in UTC when the booking was updated.";
const BOOKING_UTC_EXPIRES_AT_DOC = "An ISO8601 date times in UTC for when this booking is due to expire if the status is `ON_HOLD`.";
const BOOKING_UTC_REDEEMED_AT_DOC = "An ISO8601 date time in UTC at when the booking was redeemed.";
const BOOKING_UTC_CONFIRMED_AT_DOC = "An ISO8601 date time in UTC when the booking was confirmed.";
const BOOKING_PRODUCT_ID_DOC = "The product ID that identifies the product in the booking system to make this reservation.";
const BOOKING_PRODUCT_DOC = "A bookable product listed by a supplier.";
const BOOKING_OPTION_ID_DOC = "The product ID that identifies the product option in the booking system to make this reservation.";
const BOOKING_OPTION_DOC = "Product options are subdivisions of the original product that will affect price and / or duration. Within the OCTo spec, every product must contain an option.";
const BOOKING_CANCELLABLE_DOC = "A boolean field indicating whether this booking can be cancelled.";
const BOOKING_CANCELLATION_DOC = "An object with information about why and when the booking was cancelled. This is `NULL` if the booking is not cancelled.";
const BOOKING_FREESALE_DOC = "Whether the booking was made as freesale (without checking availability first).";
const BOOKING_AVAILABILITY_DOC = "The availability object that was booked.\n";
const BOOKING_CONTACT_DOC = "Contact details for the guests that will attend the tour/attraction. Contact schema can be applied to both the booking object (the main reservation) or the unit object (individual ticket holders - if the supplier requires this information)";
const BOOKING_NOTES_DOC = "Optional notes for the booking.";
const BOOKING_DELIVERY_METHODS_DOC = "An array of delivery methods available for this booking.";
const BOOKING_VOUCHER_DOC = "";
const BOOKING_UNIT_ITEMS_DOC = "An array o`f unit items that will be included in the booking.";

const BOOKING_ID_EXAMPLE = "bbbb6227-54fc-4c32-9ed7-dc3eb99966ea";
const BOOKING_UUID_EXAMPLE = "559aed3d-6d5b-4fe0-bfca-99f5e7218a56";
const BOOKING_TEST_MODE_EXAMPLE = false;
const BOOKING_RESELLER_REFERENCE_EXAMPLE = null;
const BOOKING_SUPPLIER_REFERENCE_EXAMPLE = "XOPSUT";
const BOOKING_STATUS_EXAMPLE = BookingStatus.CONFIRMED;
const BOOKING_UTC_CREATED_AT_EXAMPLE = "2022-05-25T10:34:22Z";
const BOOKING_UTC_UPDATED_AT_EXAMPLE = "2022-05-25T10:34:22Z";
const BOOKING_UTC_EXPIRES_AT_EXAMPLE = "2022-05-25T11:04:22Z";
const BOOKING_UTC_REDEEMED_AT_EXAMPLE = "2022-06-25T10:34:22Z";
const BOOKING_UTC_CONFIRMED_AT_EXAMPLE = "2022-05-25T11:00:22Z";
const BOOKING_PRODUCT_ID_EXAMPLE = PRODUCT_ID_EXAMPLE;

const BOOKING_PRODUCT_EXAMPLE = PRODUCT_EXAMPLE;
const BOOKING_OPTION_ID_EXAMPLE = OPTION_ID_EXAMPLE;
const BOOKING_OPTION_EXAMPLE = OPTION_EXAMPLE;
const BOOKING_CANCELLABLE_EXAMPLE = true;
const BOOKING_FREESALE_EXAMPLE = false;
const BOOKING_CONTACT_EXAMPLE = CONTACT_EXAMPLE;
const BOOKING_NOTES_EXAMPLE = "Optional notes for the booking";
const BOOKING_DELIVERY_METHODS_EXAMPLE = #[
  DeliveryMethod.TICKET,
  DeliveryMethod.VOUCHER
];
const BOOKING_VOUCHER_EXAMPLE = TICKET_EXAMPLE;
const BOOKING_UNIT_ITEMS_EXAMPLE = #[UNIT_ITEM_ADULT_ON_HOLD];

@example(BOOKING_ON_HOLD_EXAMPLE)
model Booking {
  @doc(BOOKING_ID_DOC)
  @example(BOOKING_ID_EXAMPLE)
  id: string;

  @doc(BOOKING_UUID_DOC)
  @example(BOOKING_UUID_EXAMPLE)
  @format("uuid")
  uuid: string;

  @doc(BOOKING_TEST_MODE_DOC)
  @example(BOOKING_TEST_MODE_EXAMPLE)
  testMode: boolean;

  @doc(BOOKING_RESELLER_REFERENCE_DOC)
  @example(BOOKING_RESELLER_REFERENCE_EXAMPLE)
  resellerReference: string | null;

  @doc(BOOKING_RESELLER_REFERENCE_DOC)
  @example(BOOKING_SUPPLIER_REFERENCE_EXAMPLE)
  supplierReference: string | null;

  @doc(BOOKING_STATUS_DOC)
  @example(BOOKING_STATUS_EXAMPLE)
  status: BookingStatus;

  @doc(BOOKING_UTC_CREATED_AT_DOC)
  @example(BOOKING_UTC_CREATED_AT_EXAMPLE)
  utcCreatedAt: string;

  @doc(BOOKING_UTC_UPDATED_AT_DOC)
  @example(BOOKING_UTC_UPDATED_AT_EXAMPLE)
  utcUpdatedAt: string | null;

  @doc(BOOKING_UTC_EXPIRES_AT_DOC)
  @example(BOOKING_UTC_EXPIRES_AT_EXAMPLE)
  utcExpiresAt: string | null;

  @doc(BOOKING_UTC_REDEEMED_AT_DOC)
  @example(BOOKING_UTC_REDEEMED_AT_EXAMPLE)
  utcRedeemedAt: string | null;

  @doc(BOOKING_UTC_CONFIRMED_AT_DOC)
  @example(BOOKING_UTC_CONFIRMED_AT_EXAMPLE)
  utcConfirmedAt: string | null;

  @doc(BOOKING_PRODUCT_ID_DOC)
  @example(BOOKING_PRODUCT_ID_EXAMPLE)
  productId: string;

  @doc(BOOKING_PRODUCT_DOC)
  @example(BOOKING_PRODUCT_EXAMPLE)
  prdouct?: Product;

  @doc(BOOKING_OPTION_ID_DOC)
  @example(BOOKING_OPTION_ID_EXAMPLE)
  optionId: string;

  @doc(BOOKING_OPTION_ID_DOC)
  @example(BOOKING_OPTION_EXAMPLE)
  option?: Option;

  @doc(BOOKING_OPTION_DOC)
  @example(BOOKING_CANCELLABLE_EXAMPLE)
  cancellable: boolean;

  @doc(BOOKING_CANCELLABLE_DOC)
  @example(BOOKING_CANCELLATION_EXAMPLE)
  cancellation: BookingCancellation | null;

  @doc(BOOKING_FREESALE_DOC)
  @example(BOOKING_FREESALE_EXAMPLE)
  freesale: boolean;

  @doc(BOOKING_AVAILABILITY_ID_DOC)
  @example(BOOKING_AVAILABILITY_ID_EXAMPLE)
  availabilityId: string;

  @doc(BOOKING_AVAILABILITY_DOC)
  @example(BOOKING_AVAILABILITY_EXAMPLE)
  availability: BookingAvailability;

  @doc(BOOKING_CONTACT_DOC)
  @example(BOOKING_CONTACT_EXAMPLE)
  contact: Contact;

  @doc(BOOKING_NOTES_DOC)
  @example(BOOKING_NOTES_EXAMPLE)
  notes: string | null;

  @doc(BOOKING_DELIVERY_METHODS_DOC)
  @example(BOOKING_DELIVERY_METHODS_EXAMPLE)
  deliveryMethods: DeliveryMethod[];

  @doc(BOOKING_VOUCHER_DOC)
  @example(BOOKING_VOUCHER_EXAMPLE)
  voucher: Ticket | null;

  @doc(BOOKING_UNIT_ITEMS_DOC)
  @example(BOOKING_UNIT_ITEMS_EXAMPLE)
  unitItems: UnitItem[];
  // capabilities
  ...BookingPricing;
}

const BOOKING_ON_HOLD_EXAMPLE = #{
  id: BOOKING_ID_EXAMPLE,
  uuid: BOOKING_UUID_EXAMPLE,
  testMode: BOOKING_TEST_MODE_EXAMPLE,
  resellerReference: BOOKING_RESELLER_REFERENCE_EXAMPLE,
  supplierReference: BOOKING_SUPPLIER_REFERENCE_EXAMPLE,
  status: BookingStatus.ON_HOLD,
  utcCreatedAt: BOOKING_UTC_CREATED_AT_EXAMPLE,
  utcUpdatedAt: BOOKING_UTC_UPDATED_AT_EXAMPLE,
  utcExpiresAt: BOOKING_UTC_EXPIRES_AT_EXAMPLE,
  utcRedeemedAt: null,
  utcConfirmedAt: null,
  productId: BOOKING_PRODUCT_ID_EXAMPLE,
  prdouct: BOOKING_PRODUCT_EXAMPLE,
  optionId: BOOKING_OPTION_ID_EXAMPLE,
  option: BOOKING_OPTION_EXAMPLE,
  cancellable: BOOKING_CANCELLABLE_EXAMPLE,
  cancellation: null,
  freesale: BOOKING_FREESALE_EXAMPLE,
  availabilityId: BOOKING_AVAILABILITY_ID_EXAMPLE,
  availability: BOOKING_AVAILABILITY_EXAMPLE,
  contact: BOOKING_CONTACT_EXAMPLE,
  notes: BOOKING_NOTES_EXAMPLE,
  deliveryMethods: BOOKING_DELIVERY_METHODS_EXAMPLE,
  voucher: null,
  unitItems: #[
    UNIT_ITEM_ADULT_ON_HOLD,
    UNIT_ITEM_CHILD_ON_HOLD,
    UNIT_ITEM_INFANT_ON_HOLD
  ],
};

const BOOKING_ON_HOLD_EXAMPLE_PRICING = #{
  ...BOOKING_ON_HOLD_EXAMPLE,
  product: PRODUCT_PRICING_PER_UNIT,
  option: OPTION_PRICING_PER_UNIT,
  unitItems: #[
    UNIT_ITEM_ADULT_ON_HOLD_PRICING_EUR,
    UNIT_ITEM_CHILD_ON_HOLD_PRICING_EUR,
    UNIT_ITEM_INFANT_ON_HOLD_PRICING_EUR
  ]
};

const BOOKING_CONFIRMED_EXAMPLE = #{
  id: BOOKING_ID_EXAMPLE,
  uuid: BOOKING_UUID_EXAMPLE,
  testMode: BOOKING_TEST_MODE_EXAMPLE,
  resellerReference: BOOKING_RESELLER_REFERENCE_EXAMPLE,
  supplierReference: BOOKING_SUPPLIER_REFERENCE_EXAMPLE,
  status: BookingStatus.CONFIRMED,
  utcCreatedAt: BOOKING_UTC_CREATED_AT_EXAMPLE,
  utcUpdatedAt: BOOKING_UTC_UPDATED_AT_EXAMPLE,
  utcExpiresAt: null,
  utcRedeemedAt: null,
  utcConfirmedAt: BOOKING_UTC_CONFIRMED_AT_EXAMPLE,
  productId: BOOKING_PRODUCT_ID_EXAMPLE,
  prdouct: BOOKING_PRODUCT_EXAMPLE,
  optionId: BOOKING_OPTION_ID_EXAMPLE,
  option: BOOKING_OPTION_EXAMPLE,
  cancellable: BOOKING_CANCELLABLE_EXAMPLE,
  cancellation: null,
  freesale: BOOKING_FREESALE_EXAMPLE,
  availabilityId: BOOKING_AVAILABILITY_ID_EXAMPLE,
  availability: BOOKING_AVAILABILITY_EXAMPLE,
  contact: BOOKING_CONTACT_EXAMPLE,
  notes: BOOKING_NOTES_EXAMPLE,
  deliveryMethods: BOOKING_DELIVERY_METHODS_EXAMPLE,
  voucher: TICKET_EXAMPLE,
  unitItems: #[
    UNIT_ITEM_ADULT_CONFIRMED,
    UNIT_ITEM_CHILD_CONFIRMED,
    UNIT_ITEM_INFANT_CONFIRMED
  ],
};

const BOOKING_CONFIRMED_EXAMPLE_PRICING = #{
  ...BOOKING_CONFIRMED_EXAMPLE,
  product: PRODUCT_PRICING_PER_UNIT,
  option: OPTION_PRICING_PER_UNIT,
  unitItems: #[
    UNIT_ITEM_ADULT_CONFIRMED_PRICING_EUR,
    UNIT_ITEM_CHILD_CONFIRMED_PRICING_EUR,
    UNIT_ITEM_INFANT_CONFIRMED_PRICING_EUR
  ]
};

const BOOKING_CANCELLED_EXAMPLE = #{
  id: BOOKING_ID_EXAMPLE,
  uuid: BOOKING_UUID_EXAMPLE,
  testMode: BOOKING_TEST_MODE_EXAMPLE,
  resellerReference: BOOKING_RESELLER_REFERENCE_EXAMPLE,
  supplierReference: BOOKING_SUPPLIER_REFERENCE_EXAMPLE,
  status: BookingStatus.CANCELLED,
  utcCreatedAt: BOOKING_UTC_CREATED_AT_EXAMPLE,
  utcUpdatedAt: BOOKING_UTC_UPDATED_AT_EXAMPLE,
  utcExpiresAt: null,
  utcRedeemedAt: null,
  utcConfirmedAt: BOOKING_UTC_CONFIRMED_AT_EXAMPLE,
  productId: BOOKING_PRODUCT_ID_EXAMPLE,
  prdouct: BOOKING_PRODUCT_EXAMPLE,
  optionId: BOOKING_OPTION_ID_EXAMPLE,
  option: BOOKING_OPTION_EXAMPLE,
  cancellable: false,
  cancellation: BOOKING_CANCELLATION_EXAMPLE,
  freesale: BOOKING_FREESALE_EXAMPLE,
  availabilityId: BOOKING_AVAILABILITY_ID_EXAMPLE,
  availability: BOOKING_AVAILABILITY_EXAMPLE,
  contact: BOOKING_CONTACT_EXAMPLE,
  notes: BOOKING_NOTES_EXAMPLE,
  deliveryMethods: BOOKING_DELIVERY_METHODS_EXAMPLE,
  voucher: null,
  unitItems: #[],
};

const BOOKING_CANCELLED_EXAMPLE_PRICING = #{
  ...BOOKING_CANCELLED_EXAMPLE,
  product: PRODUCT_PRICING_PER_UNIT,
  option: OPTION_PRICING_PER_UNIT,
  unitItems: #[],
};